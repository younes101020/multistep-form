{
  "name": "multistep-01",
  "type": "registry:block",
  "registryDependencies": [
    "input",
    "button",
    "card",
    "label"
  ],
  "files": [
    {
      "type": "registry:block",
      "content": "\"use client\";\n\nimport { CardContent } from \"@/components/ui/card\";\nimport { StepsHeader } from \"@/registry/block/multistep-01/step-header\";\nimport { useRouter, useSearchParams } from \"next/navigation\";\nimport React, {\n  createContext,\n  ReactNode,\n  Suspense,\n  useCallback,\n  useContext,\n} from \"react\";\n\nexport type UseStepActionsProps = {\n  helpers: UseStepActions;\n};\n\nexport type UseStepActions = {\n  goToNextStep: () => void;\n  goToPrevStep: () => void;\n  reset: () => void;\n  canGoToNextStep: boolean;\n  canGoToPrevStep: boolean;\n  setStep: (step: number | ((step: number) => number)) => void;\n} & { currentStep?: number };\n\nconst StepContext = createContext<UseStepActions | null>(null);\n\nexport function useStep(): UseStepActions {\n  const context = useContext(StepContext);\n  if (context === null) {\n    throw new Error(\"useStep must be used within a UserProvider\");\n  }\n  return context;\n}\n\ntype SetStepCallbackType = (step: number | ((step: number) => number)) => void;\n\nfunction BaseStepProvider({ children }: { children: ReactNode }) {\n  const maxStep = React.Children.count(children);\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const currentStep = Number(searchParams.get(\"step\") || \"1\");\n\n  const canGoToNextStep = currentStep + 1 <= maxStep;\n  const canGoToPrevStep = currentStep - 1 > 0;\n\n  const setStep = useCallback<SetStepCallbackType>(\n    step => {\n      const newStep = typeof step === \"function\" ? step(currentStep) : step;\n\n      if (newStep >= 1 && newStep <= maxStep) {\n        const params = new URLSearchParams(searchParams);\n        params.set(\"step\", newStep.toString());\n        router.push(`?${params.toString()}`);\n        return;\n      }\n\n      throw new Error(\"Step not valid\");\n    },\n    [maxStep, currentStep, router, searchParams],\n  );\n\n  const goToNextStep = useCallback(() => {\n    if (canGoToNextStep) {\n      setStep(step => step + 1);\n    }\n  }, [canGoToNextStep, setStep]);\n\n  const goToPrevStep = useCallback(() => {\n    if (canGoToPrevStep) {\n      setStep(step => step - 1);\n    }\n  }, [canGoToPrevStep, setStep]);\n\n  const reset = useCallback(() => {\n    setStep(1);\n  }, [setStep]);\n\n  return (\n    <StepContext.Provider\n      value={{\n        goToNextStep,\n        goToPrevStep,\n        canGoToNextStep,\n        canGoToPrevStep,\n        setStep,\n        reset,\n        currentStep,\n      }}\n    >\n      <StepsHeader className=\"p-10\" />\n      {React.Children.map(children, (child, index) => {\n        if (React.isValidElement(child) && index + 1 === currentStep) {\n          return <CardContent>{React.cloneElement(child)}</CardContent>;\n        }\n        return null;\n      })}\n    </StepContext.Provider>\n  );\n}\n\n// workaround hoc to prevent https://nextjs.org/docs/messages/missing-suspense-with-csr-bailout\nexport function StepProvider({ children }: { children: ReactNode }) {\n  return (\n    <Suspense>\n      <BaseStepProvider>{children}</BaseStepProvider>\n    </Suspense>\n  );\n}\n",
      "path": "block/multistep-01/step.tsx",
      "target": "components/block/multistep-01/step.tsx"
    },
    {
      "type": "registry:block",
      "content": "import { CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { cn } from \"@/lib/utils\";\nimport { useStep } from \"./step\";\n\nexport const headerData = [\n  {\n    title: \"First step\",\n    description: \"This will blabla blabla blabla\",\n  },\n  {\n    title: \"Second step\",\n    description: \"This will blabla blabla blabla\",\n  },\n  {\n    title: \"Third step\",\n    description: \"This will blabla blabla blabla\",\n  },\n] as const;\n\nfunction Bounce() {\n  return (\n    <span className=\"relative flex h-2 w-2 pt-[.25rem]\">\n      <span className=\"animate-ping absolute inline-flex h-full w-full rounded-full bg-primary opacity-75\"></span>\n      <span className=\"relative inline-flex rounded-full h-2 w-2 bg-primary\"></span>\n    </span>\n  );\n}\n\nexport function StepsHeader({ className }: { className?: string }) {\n  const { currentStep } = useStep();\n  return (\n    <CardHeader\n      className={cn(\n        \"flex md:flex-row gap-8 md:gap-4 justify-around mt-8\",\n        className,\n      )}\n    >\n      {headerData.map((step, i) => (\n        <div\n          key={i}\n          className={`w-56 ${i + 1 !== currentStep && \"opacity-40\"} relative`}\n        >\n          <CardTitle className=\"flex gap-2 font-mono\">\n            <div className=\"z-20\">{step.title}</div>\n            {i + 1 === currentStep && <Bounce />}\n          </CardTitle>\n          <CardDescription className=\"italic\">\n            {step.description}\n          </CardDescription>\n          <div\n            className={`\n              absolute top-[-2rem] left-[-.8rem] text-muted-foreground font-bold text-6xl opacity-30\n              before:content-[''] \n              before:absolute \n            `}\n          >\n            {i + 1}\n          </div>\n        </div>\n      ))}\n    </CardHeader>\n  );\n}\n",
      "path": "block/multistep-01/step-header.tsx",
      "target": "components/block/multistep-01/step-header.tsx"
    }
  ],
  "dependencies": [
    "lucide-react"
  ]
}